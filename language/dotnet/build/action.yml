name: dotnet build
description: Build .NET Core project

inputs:
  target_ref:
    required: false
    description: The branch or tag ref or commit SHA that will be merged to base code.
    default: ${{ github.head_ref || github.ref_name }}
  application_name:
    required: true
    description: Name of application
  code_language:
    required: true
    description: The program language of this repository
  dotnet_version:
    description: The version of .NET Core SDK
    required: true
  dotnet_project_path:
    required: true
    description: The path of .NET Core project
  aws_access_key_id:
    required: true
    description: AWS access key ID
  aws_secret_access_key:
    required: true
    description: AWS secret access key

outputs:
  image_name:
    description: The name of Docker image
    value: ${{ steps.build-image.outputs.image_name }}
  image_tag:
    description: The tag of Docker image
    value: ${{ steps.build-image.outputs.image_tag }}

runs:
  using: composite
  steps:
    - uses: jiw-kittipong/github-action-workflows/checkout@main
      with:
        repository: ${{ inputs.repository }}
        base_ref: ${{ inputs.base_ref }}
        target_ref: ${{ inputs.target_ref }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1.7.0
      with:
        aws-access-key-id: ${{ inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
        aws-region: ap-southeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Detect environment
      id: detect-environment
      uses: jiw-kittipong/github-action-workflows/detect-environment@main
      with:
        target_ref: ${{ inputs.target_ref }}

    - name: Build and push
      id: build-image
      shell: bash
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.application_name }}
        IMAGE_TAG: ${{ github.sha }}
#        ECR_REPOSITORY: ${{ steps.tag-version.outputs.tag }}
#        IMAGE_TAG: ${{ steps.tag-version.outputs.tag }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg DOTNET_VERSION=${{ inputs.dotnet_version }} -f ${{ inputs.dotnet_project_path }}/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image_name=$ECR_REPOSITORY" >> $GITHUB_OUTPUT
        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
